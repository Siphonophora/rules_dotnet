// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: worker_protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Blaze.Worker {

  /// <summary>Holder for reflection information generated from worker_protocol.proto</summary>
  public static partial class WorkerProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for worker_protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorkerProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChV3b3JrZXJfcHJvdG9jb2wucHJvdG8SDGJsYXplLndvcmtlciIlCgVJbnB1",
            "dBIMCgRwYXRoGAEgASgJEg4KBmRpZ2VzdBgCIAEoDCJZCgtXb3JrUmVxdWVz",
            "dBIRCglhcmd1bWVudHMYASADKAkSIwoGaW5wdXRzGAIgAygLMhMuYmxhemUu",
            "d29ya2VyLklucHV0EhIKCnJlcXVlc3RfaWQYAyABKAUiRQoMV29ya1Jlc3Bv",
            "bnNlEhEKCWV4aXRfY29kZRgBIAEoBRIOCgZvdXRwdXQYAiABKAkSEgoKcmVx",
            "dWVzdF9pZBgDIAEoBUImCiRjb20uZ29vZ2xlLmRldnRvb2xzLmJ1aWxkLmxp",
            "Yi53b3JrZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Blaze.Worker.Input), global::Blaze.Worker.Input.Parser, new[]{ "Path", "Digest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blaze.Worker.WorkRequest), global::Blaze.Worker.WorkRequest.Parser, new[]{ "Arguments", "Inputs", "RequestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blaze.Worker.WorkResponse), global::Blaze.Worker.WorkResponse.Parser, new[]{ "ExitCode", "Output", "RequestId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An input file.
  /// </summary>
  public sealed partial class Input : pb::IMessage<Input> {
    private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Input> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blaze.Worker.WorkerProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input(Input other) : this() {
      path_ = other.path_;
      digest_ = other.digest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input Clone() {
      return new Input(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// The path in the file system where to read this input artifact from. This is
    /// either a path relative to the execution root (the worker process is
    /// launched with the working directory set to the execution root), or an
    /// absolute path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 2;
    private pb::ByteString digest_ = pb::ByteString.Empty;
    /// <summary>
    /// A hash-value of the contents. The format of the contents is unspecified and
    /// the digest should be treated as an opaque token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Digest {
      get { return digest_; }
      set {
        digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Input);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Input other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Digest != other.Digest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Digest.Length != 0) hash ^= Digest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Digest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Digest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Digest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Digest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Input other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Digest.Length != 0) {
        Digest = other.Digest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            Digest = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This represents a single work unit that Blaze sends to the worker.
  /// </summary>
  public sealed partial class WorkRequest : pb::IMessage<WorkRequest> {
    private static readonly pb::MessageParser<WorkRequest> _parser = new pb::MessageParser<WorkRequest>(() => new WorkRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blaze.Worker.WorkerProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkRequest(WorkRequest other) : this() {
      arguments_ = other.arguments_.Clone();
      inputs_ = other.inputs_.Clone();
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkRequest Clone() {
      return new WorkRequest(this);
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_arguments_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> arguments_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Arguments {
      get { return arguments_; }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Blaze.Worker.Input> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(18, global::Blaze.Worker.Input.Parser);
    private readonly pbc::RepeatedField<global::Blaze.Worker.Input> inputs_ = new pbc::RepeatedField<global::Blaze.Worker.Input>();
    /// <summary>
    /// The inputs that the worker is allowed to read during execution of this
    /// request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Blaze.Worker.Input> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private int requestId_;
    /// <summary>
    /// To support multiplex worker, each WorkRequest must have an unique ID. This
    /// ID should be attached unchanged to the WorkResponse.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!arguments_.Equals(other.arguments_)) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= arguments_.GetHashCode();
      hash ^= inputs_.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      arguments_.WriteTo(output, _repeated_arguments_codec);
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (RequestId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkRequest other) {
      if (other == null) {
        return;
      }
      arguments_.Add(other.arguments_);
      inputs_.Add(other.inputs_);
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 24: {
            RequestId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The worker sends this message to Blaze when it finished its work on the
  /// WorkRequest message.
  /// </summary>
  public sealed partial class WorkResponse : pb::IMessage<WorkResponse> {
    private static readonly pb::MessageParser<WorkResponse> _parser = new pb::MessageParser<WorkResponse>(() => new WorkResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blaze.Worker.WorkerProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkResponse(WorkResponse other) : this() {
      exitCode_ = other.exitCode_;
      output_ = other.output_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkResponse Clone() {
      return new WorkResponse(this);
    }

    /// <summary>Field number for the "exit_code" field.</summary>
    public const int ExitCodeFieldNumber = 1;
    private int exitCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExitCode {
      get { return exitCode_; }
      set {
        exitCode_ = value;
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 2;
    private string output_ = "";
    /// <summary>
    /// This is printed to the user after the WorkResponse has been received and is
    /// supposed to contain compiler warnings / errors etc. - thus we'll use a
    /// string type here, which gives us UTF-8 encoding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output {
      get { return output_; }
      set {
        output_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private int requestId_;
    /// <summary>
    /// To support multiplex worker, each WorkResponse must have an unique ID.
    /// Since worker processes which support multiplex worker will handle multiple
    /// WorkRequests in parallel, this ID will be used to determined which
    /// WorkerProxy does this WorkResponse belong to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExitCode != other.ExitCode) return false;
      if (Output != other.Output) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExitCode != 0) hash ^= ExitCode.GetHashCode();
      if (Output.Length != 0) hash ^= Output.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExitCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExitCode);
      }
      if (Output.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Output);
      }
      if (RequestId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExitCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitCode);
      }
      if (Output.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output);
      }
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkResponse other) {
      if (other == null) {
        return;
      }
      if (other.ExitCode != 0) {
        ExitCode = other.ExitCode;
      }
      if (other.Output.Length != 0) {
        Output = other.Output;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExitCode = input.ReadInt32();
            break;
          }
          case 18: {
            Output = input.ReadString();
            break;
          }
          case 24: {
            RequestId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
